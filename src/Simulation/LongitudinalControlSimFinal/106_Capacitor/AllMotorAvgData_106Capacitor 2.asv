%Users / anthonypeters / Documents / MATLAB / MSME / Project /
%Compile all Motor AVG Data
clc;clear all ;clear; clear figure;

%%
directory = '/Users/anthonypeters/Documents/MATLAB/MSME/Project/106_Capacitor';
baseFileName_50 = '106_UnitStep_PWM50_Test';
baseFileName_70 = '106_UnitStep_PWM70_Test';
baseFileName_80 = '106_UnitStep_PWM80_Test';
baseFileName_90 = '106_UnitStep_PWM90_Test';
baseFileName_100 = '106_UnitStep_PWM100_Test';
files_50 = dir(fullfile(directory, [baseFileName_50, '*.csv']));
files_70 = dir(fullfile(directory, [baseFileName_70, '*.csv']));
files_80 = dir(fullfile(directory, [baseFileName_80, '*.csv']));
files_90 = dir(fullfile(directory, [baseFileName_90, '*.csv']));
files_100 = dir(fullfile(directory, [baseFileName_100, '*.csv']));
AllData_50 = cell(1, numel(files_50));
AllData_70 = cell(1, numel(files_70));
AllData_80 = cell(1, numel(files_80));
AllData_90 = cell(1, numel(files_90));
AllData_100 = cell(1, numel(files_100));

for i = 1:numel(files_50)
    
    filename_50 = fullfile(directory, files_50(i).name);
    filename_70 = fullfile(directory, files_70(i).name);
    filename_80 = fullfile(directory, files_80(i).name);
    filename_90 = fullfile(directory, files_90(i).name);
    filename_100 = fullfile(directory, files_100(i).name);

    data_50 = readmatrix(filename_50); % Adjust loading method according to your file format
    data_70 = readmatrix(filename_70); 
    data_80 = readmatrix(filename_80); 
    data_90 = readmatrix(filename_90); 
    data_100 = readmatrix(filename_100); 

    AllData_50{i} = data_50;
    AllData_70{i} = data_70;
    AllData_80{i} = data_80;
    AllData_90{i} = data_90;
    AllData_100{i} = data_100;
    
end


distance = 2.13; %m % = 6.9 feet
speed_total = 0 ;

for i = 1:numel(files_50)

    time_50{i} = AllData_50{i}(:,1);
    time_70{i} = AllData_70{i}(:,1);
    time_80{i} = AllData_80{i}(:,1);
    time_90{i} = AllData_90{i}(:,1);
    time_100{i} = AllData_100{i}(:,1);

    start_signal_50{i} = AllData_50{i}(:,2);
    start_signal_70{i} = AllData_70{i}(:,2);
    start_signal_80{i} = AllData_80{i}(:,2);
    start_signal_90{i} = AllData_90{i}(:,2);
    start_signal_100{i} = AllData_100{i}(:,2);

    motor_voltage_50{i} = AllData_50{i}(:,3);
    motor_voltage_70{i} = AllData_70{i}(:,3);
    motor_voltage_80{i} = AllData_80{i}(:,3);
    motor_voltage_90{i} = AllData_90{i}(:,3);
    motor_voltage_100{i} = AllData_100{i}(:,3);

    accel_X_50{i} = AllData_50{i}(:,4);
    accel_X_70{i} = AllData_70{i}(:,4);
    accel_X_80{i} = AllData_80{i}(:,4);
    accel_X_90{i} = AllData_90{i}(:,4);
    accel_X_100{i} = AllData_100{i}(:,4);

    accel_Y_50{i} = AllData_50{i}(:,5);
    accel_Y_70{i} = AllData_70{i}(:,5);
    accel_Y_80{i} = AllData_80{i}(:,5);
    accel_Y_90{i} = AllData_90{i}(:,5);
    accel_Y_100{i} = AllData_100{i}(:,5);

    battery_voltage_50{i} = AllData_50{i}(:,6);
    battery_voltage_70{i} = AllData_70{i}(:,6);
    battery_voltage_80{i} = AllData_80{i}(:,6);
    battery_voltage_90{i} = AllData_90{i}(:,6);
    battery_voltage_100{i} = AllData_100{i}(:,6);

    driving_50{i} = find(start_signal_50{i} == 1);
    driving_70{i} = find(start_signal_70{i} == 1);
    driving_80{i} = find(start_signal_80{i} == 1);
    driving_90{i} = find(start_signal_90{i} == 1);
    driving_100{i} = find(start_signal_100{i} == 1);

    motor_voltage_driving_50{i} = motor_voltage_50{i}(driving_50{i},:);
    motor_voltage_driving_70{i} = motor_voltage_70{i}(driving_70{i},:);
    motor_voltage_driving_80{i} = motor_voltage_80{i}(driving_80{i},:);
    motor_voltage_driving_90{i} = motor_voltage_90{i}(driving_90{i},:);
    motor_voltage_driving_100{i} = motor_voltage_100{i}(driving_100{i},:);

    accelX_driving_50{i} = accel_X_50{i}(driving_50{i},:);
    accelX_driving_70{i} = accel_X_70{i}(driving_70{i},:);
    accelX_driving_80{i} = accel_X_80{i}(driving_80{i},:);
    accelX_driving_90{i} = accel_X_90{i}(driving_90{i},:);
    accelX_driving_100{i} = accel_X_100{i}(driving_100{i},:);

    accelY_driving_50{i} = accel_Y_50{i}(driving_50{i},:);
    accelY_driving_70{i} = accel_Y_70{i}(driving_70{i},:);
    accelY_driving_80{i} = accel_Y_80{i}(driving_80{i},:);
    accelY_driving_90{i} = accel_Y_90{i}(driving_90{i},:);
    accelY_driving_100{i} = accel_Y_100{i}(driving_100{i},:);

    battery_voltage_driving_50{i} = battery_voltage_50{i}(driving_50{i},:);
    battery_voltage_driving_70{i} = battery_voltage_70{i}(driving_70{i},:);
    battery_voltage_driving_80{i} = battery_voltage_80{i}(driving_80{i},:);
    battery_voltage_driving_90{i} = battery_voltage_90{i}(driving_90{i},:);
    battery_voltage_driving_100{i} = battery_voltage_100{i}(driving_100{i},:);

    Time_driving_50{i} = time_50{i}(driving_50{i},:);
    Time_driving_70{i} = time_70{i}(driving_70{i},:);
    Time_driving_80{i} = time_80{i}(driving_80{i},:);
    Time_driving_90{i} = time_90{i}(driving_90{i},:);
    Time_driving_100{i} = time_100{i}(driving_100{i},:);

    t_50{i} = Time_driving_50{i} - Time_driving_50{i}(1);
    t_70{i} = Time_driving_70{i} - Time_driving_70{i}(1);
    t_80{i} = Time_driving_80{i} - Time_driving_80{i}(1);
    t_90{i} = Time_driving_90{i} - Time_driving_90{i}(1);
    t_100{i} = Time_driving_100{i} - Time_driving_100{i}(1);

end

%% Calculate Averages
%%%ReSizeMatrixes to take averages
motor_voltage_driving_maxRows_50 = max(cellfun(@(x) size(x, 1), motor_voltage_driving_50));
motor_voltage_driving_maxCols_50 = max(cellfun(@(x) size(x, 2), motor_voltage_driving_50));
motor_voltage_driving_Sum_50 = zeros(motor_voltage_driving_maxRows_50, motor_voltage_driving_maxCols_50);
motor_voltage_driving_maxRows_70 = max(cellfun(@(x) size(x, 1), motor_voltage_driving_70));
motor_voltage_driving_maxCols_70 = max(cellfun(@(x) size(x, 2), motor_voltage_driving_70));
motor_voltage_driving_Sum_70 = zeros(motor_voltage_driving_maxRows_70, motor_voltage_driving_maxCols_70);
motor_voltage_driving_maxRows_80 = max(cellfun(@(x) size(x, 1), motor_voltage_driving_80));
motor_voltage_driving_maxCols_80 = max(cellfun(@(x) size(x, 2), motor_voltage_driving_80));
motor_voltage_driving_Sum_80 = zeros(motor_voltage_driving_maxRows_80, motor_voltage_driving_maxCols_80);
motor_voltage_driving_maxRows_90 = max(cellfun(@(x) size(x, 1), motor_voltage_driving_90));
motor_voltage_driving_maxCols_90 = max(cellfun(@(x) size(x, 2), motor_voltage_driving_90));
motor_voltage_driving_Sum_90 = zeros(motor_voltage_driving_maxRows_90, motor_voltage_driving_maxCols_90);
motor_voltage_driving_maxRows_100 = max(cellfun(@(x) size(x, 1), motor_voltage_driving_100));
motor_voltage_driving_maxCols_100 = max(cellfun(@(x) size(x, 2), motor_voltage_driving_100));
motor_voltage_driving_Sum_100 = zeros(motor_voltage_driving_maxRows_100, motor_voltage_driving_maxCols_100);

accelX_driving_maxRows_50 = max(cellfun(@(x) size(x, 1), accelX_driving_50));
accelX_driving_maxCols_50 = max(cellfun(@(x) size(x, 2), accelX_driving_50));
accelX_driving_Sum_50 = zeros(accelX_driving_maxRows_50, accelX_driving_maxCols_50);
accelX_driving_maxRows_70 = max(cellfun(@(x) size(x, 1), accelX_driving_70));
accelX_driving_maxCols_70 = max(cellfun(@(x) size(x, 2), accelX_driving_70));
accelX_driving_Sum_70 = zeros(accelX_driving_maxRows_70, accelX_driving_maxCols_70);
accelX_driving_maxRows_80 = max(cellfun(@(x) size(x, 1), accelX_driving_80));
accelX_driving_maxCols_80 = max(cellfun(@(x) size(x, 2), accelX_driving_80));
accelX_driving_Sum_80 = zeros(accelX_driving_maxRows_80, accelX_driving_maxCols_80);
accelX_driving_maxRows_90 = max(cellfun(@(x) size(x, 1), accelX_driving_90));
accelX_driving_maxCols_90 = max(cellfun(@(x) size(x, 2), accelX_driving_90));
accelX_driving_Sum_90 = zeros(accelX_driving_maxRows_90, accelX_driving_maxCols_90);
accelX_driving_maxRows_100 = max(cellfun(@(x) size(x, 1), accelX_driving_100));
accelX_driving_maxCols_100 = max(cellfun(@(x) size(x, 2), accelX_driving_100));
accelX_driving_Sum_100 = zeros(accelX_driving_maxRows_100, accelX_driving_maxCols_100);

accelY_driving_maxRows_50 = max(cellfun(@(x) size(x, 1), accelY_driving_50));
accelY_driving_maxCols_50 = max(cellfun(@(x) size(x, 2), accelY_driving_50));
accelY_driving_Sum_50 = zeros(accelY_driving_maxRows_50, accelY_driving_maxCols_50);
accelY_driving_maxRows_70 = max(cellfun(@(x) size(x, 1), accelY_driving_70));
accelY_driving_maxCols_70 = max(cellfun(@(x) size(x, 2), accelY_driving_70));
accelY_driving_Sum_70 = zeros(accelY_driving_maxRows_70, accelY_driving_maxCols_70);
accelY_driving_maxRows_80 = max(cellfun(@(x) size(x, 1), accelY_driving_80));
accelY_driving_maxCols_80 = max(cellfun(@(x) size(x, 2), accelY_driving_80));
accelY_driving_Sum_80 = zeros(accelY_driving_maxRows_80, accelY_driving_maxCols_80);
accelY_driving_maxRows_90 = max(cellfun(@(x) size(x, 1), accelY_driving_90));
accelY_driving_maxCols_90 = max(cellfun(@(x) size(x, 2), accelY_driving_90));
accelY_driving_Sum_90 = zeros(accelY_driving_maxRows_90, accelY_driving_maxCols_90);
accelY_driving_maxRows_100 = max(cellfun(@(x) size(x, 1), accelY_driving_100));
accelY_driving_maxCols_100 = max(cellfun(@(x) size(x, 2), accelY_driving_100));
accelY_driving_Sum_100 = zeros(accelY_driving_maxRows_100, accelY_driving_maxCols_100);

battery_voltage_driving_maxRows_50 = max(cellfun(@(x) size(x, 1),battery_voltage_driving_50));
battery_voltage_driving_maxCols_50 = max(cellfun(@(x) size(x, 2), battery_voltage_driving_50));
battery_voltage_driving_Sum_50 = zeros(battery_voltage_driving_maxRows_50, battery_voltage_driving_maxCols_50);
battery_voltage_driving_maxRows_70 = max(cellfun(@(x) size(x, 1),battery_voltage_driving_70));
battery_voltage_driving_maxCols_70 = max(cellfun(@(x) size(x, 2), battery_voltage_driving_70));
battery_voltage_driving_Sum_70 = zeros(battery_voltage_driving_maxRows_70, battery_voltage_driving_maxCols_70);
battery_voltage_driving_maxRows_80 = max(cellfun(@(x) size(x, 1),battery_voltage_driving_80));
battery_voltage_driving_maxCols_80 = max(cellfun(@(x) size(x, 2), battery_voltage_driving_80));
battery_voltage_driving_Sum_80 = zeros(battery_voltage_driving_maxRows_80, battery_voltage_driving_maxCols_80);
battery_voltage_driving_maxRows_90 = max(cellfun(@(x) size(x, 1),battery_voltage_driving_90));
battery_voltage_driving_maxCols_90 = max(cellfun(@(x) size(x, 2), battery_voltage_driving_90));
battery_voltage_driving_Sum_90 = zeros(battery_voltage_driving_maxRows_90, battery_voltage_driving_maxCols_90);
battery_voltage_driving_maxRows_100 = max(cellfun(@(x) size(x, 1),battery_voltage_driving_100));
battery_voltage_driving_maxCols_100 = max(cellfun(@(x) size(x, 2), battery_voltage_driving_100));
battery_voltage_driving_Sum_100 = zeros(battery_voltage_driving_maxRows_100, battery_voltage_driving_maxCols_100);

t_maxRows_50 = max(cellfun(@(x) size(x, 1),t_50));
t_maxCols_50 = max(cellfun(@(x) size(x, 2), t_50));
t_Sum_50 = zeros(t_maxRows_50, t_maxCols_50);% Initialize a variable to store the total sum
t_maxRows_70 = max(cellfun(@(x) size(x, 1),t_70));
t_maxCols_70 = max(cellfun(@(x) size(x, 2), t_70));
t_Sum_70 = zeros(t_maxRows_70, t_maxCols_70);% Initialize a variable to store the total sum
t_maxRows_70 = max(cellfun(@(x) size(x, 1),t_70));
t_maxCols_70 = max(cellfun(@(x) size(x, 2), t_70));
t_Sum_70 = zeros(t_maxRows_70, t_maxCols_70);% Initialize a variable to store the total sum
t_maxRows_80 = max(cellfun(@(x) size(x, 1),t_80));
t_maxCols_80 = max(cellfun(@(x) size(x, 2), t_80));
t_Sum_80 = zeros(t_maxRows_80, t_maxCols_80);% Initialize a variable to store the total sum
t_maxRows_90 = max(cellfun(@(x) size(x, 1),t_90));
t_maxCols_90 = max(cellfun(@(x) size(x, 2), t_90));
t_Sum_90 = zeros(t_maxRows_90, t_maxCols_90);% Initialize a variable to store the total sum
t_maxRows_100 = max(cellfun(@(x) size(x, 1),t_100));
t_maxCols_100 = max(cellfun(@(x) size(x, 2), t_100));
t_Sum_100 = zeros(t_maxRows_100, t_maxCols_100);% Initialize a variable to store the total sum

for i = 1:numel(files_50)
%
 motor_voltage_driving_Data_50 = imresize(motor_voltage_driving_50{i}, [motor_voltage_driving_maxRows_50, motor_voltage_driving_maxCols_50]);
 motor_voltage_driving_Sum_50 = motor_voltage_driving_Sum_50 + motor_voltage_driving_Data_50;
 motor_voltage_driving_Data_70 = imresize(motor_voltage_driving_70{i}, [motor_voltage_driving_maxRows_70, motor_voltage_driving_maxCols_70]);
 motor_voltage_driving_Sum_70 = motor_voltage_driving_Sum_70 + motor_voltage_driving_Data_70;
 motor_voltage_driving_Data_80 = imresize(motor_voltage_driving_80{i}, [motor_voltage_driving_maxRows_80, motor_voltage_driving_maxCols_80]);
 motor_voltage_driving_Sum_80 = motor_voltage_driving_Sum_80 + motor_voltage_driving_Data_80;
 motor_voltage_driving_Data_90 = imresize(motor_voltage_driving_90{i}, [motor_voltage_driving_maxRows_90, motor_voltage_driving_maxCols_90]);
 motor_voltage_driving_Sum_90 = motor_voltage_driving_Sum_90 + motor_voltage_driving_Data_90;
 motor_voltage_driving_Data_100 = imresize(motor_voltage_driving_100{i}, [motor_voltage_driving_maxRows_100, motor_voltage_driving_maxCols_100]);
 motor_voltage_driving_Sum_100 = motor_voltage_driving_Sum_100 + motor_voltage_driving_Data_100;

%
 accelX_driving_Data_50 = imresize(accelX_driving_50{i}, [accelX_driving_maxRows_50, accelX_driving_maxCols_50]);
 accelX_driving_Sum_50 = accelX_driving_Sum_50 + accelX_driving_Data_50;
 accelY_driving_Data_50 = imresize(accelX_driving_50{i}, [accelY_driving_maxRows_50, accelY_driving_maxCols_50]);
 accelY_driving_Sum_50 = accelY_driving_Sum_50 + accelY_driving_Data_50;
 
 accelX_driving_Data_70 = imresize(accelX_driving_70{i}, [accelX_driving_maxRows_70, accelX_driving_maxCols_70]);
 accelX_driving_Sum_70 = accelX_driving_Sum_70 + accelX_driving_Data_70;
 accelY_driving_Data_70 = imresize(accelX_driving_70{i}, [accelY_driving_maxRows_70, accelY_driving_maxCols_70]);
 accelY_driving_Sum_70 = accelY_driving_Sum_70 + accelY_driving_Data_70;
 
 accelX_driving_Data_80 = imresize(accelX_driving_80{i}, [accelX_driving_maxRows_80, accelX_driving_maxCols_80]);
 accelX_driving_Sum_80 = accelX_driving_Sum_80 + accelX_driving_Data_80;
 accelY_driving_Data_80 = imresize(accelX_driving_80{i}, [accelY_driving_maxRows_80, accelY_driving_maxCols_80]);
 accelY_driving_Sum_80 = accelY_driving_Sum_80 + accelY_driving_Data_80;
 
 accelX_driving_Data_90 = imresize(accelX_driving_90{i}, [accelX_driving_maxRows_90, accelX_driving_maxCols_90]);
 accelX_driving_Sum_90 = accelX_driving_Sum_90 + accelX_driving_Data_90;
 accelY_driving_Data_90 = imresize(accelX_driving_90{i}, [accelY_driving_maxRows_90, accelY_driving_maxCols_90]);
 accelY_driving_Sum_90 = accelY_driving_Sum_90 + accelY_driving_Data_90;
 
 accelX_driving_Data_100 = imresize(accelX_driving_100{i}, [accelX_driving_maxRows_100, accelX_driving_maxCols_100]);
 accelX_driving_Sum_100 = accelX_driving_Sum_100 + accelX_driving_Data_100;
 accelY_driving_Data_100 = imresize(accelX_driving_100{i}, [accelY_driving_maxRows_100, accelY_driving_maxCols_100]);
 accelY_driving_Sum_100 = accelY_driving_Sum_100 + accelY_driving_Data_100;
%
 battery_voltage_driving_Data_50 = imresize(battery_voltage_driving_50{i}, [battery_voltage_driving_maxRows_50, battery_voltage_driving_maxCols_50]);
 battery_voltage_driving_Sum_50 = battery_voltage_driving_Sum_50 + battery_voltage_driving_Data_50;
 battery_voltage_driving_Data_70 = imresize(battery_voltage_driving_70{i}, [battery_voltage_driving_maxRows_70, battery_voltage_driving_maxCols_70]);
 battery_voltage_driving_Sum_70 = battery_voltage_driving_Sum_70 + battery_voltage_driving_Data_70;
 battery_voltage_driving_Data_80 = imresize(battery_voltage_driving_80{i}, [battery_voltage_driving_maxRows_80, battery_voltage_driving_maxCols_80]);
 battery_voltage_driving_Sum_80 = battery_voltage_driving_Sum_80 + battery_voltage_driving_Data_80;
 battery_voltage_driving_Data_90 = imresize(battery_voltage_driving_90{i}, [battery_voltage_driving_maxRows_90, battery_voltage_driving_maxCols_90]);
 battery_voltage_driving_Sum_90 = battery_voltage_driving_Sum_90 + battery_voltage_driving_Data_90;
 battery_voltage_driving_Data_100 = imresize(battery_voltage_driving_100{i}, [battery_voltage_driving_maxRows_100, battery_voltage_driving_maxCols_100]);
 battery_voltage_driving_Sum_100 = battery_voltage_driving_Sum_100 + battery_voltage_driving_Data_100;

 t_Data_50 = imresize(t_50{i}, [t_maxRows_50, t_maxCols_50]);
 t_Sum_50 = t_Sum_50 + t_Data_50;
 t_Data_70 = imresize(t_70{i}, [t_maxRows_70, t_maxCols_70]);
 t_Sum_70 = t_Sum_70 + t_Data_70;
 t_Data_80 = imresize(t_80{i}, [t_maxRows_80, t_maxCols_80]);
 t_Sum_80 = t_Sum_80 + t_Data_80;
 t_Data_90 = imresize(t_90{i}, [t_maxRows_90, t_maxCols_90]);
 t_Sum_90 = t_Sum_90 + t_Data_90;
 t_Data_100 = imresize(t_100{i}, [t_maxRows_100, t_maxCols_100]);
 t_Sum_100 = t_Sum_100 + t_Data_100;

 speed_50{i} = distance / max(t_50{i}); %m/s
 speed_total_50 =(speed_total +speed_50{i}) ;
 speed_70{i} = distance / max(t_70{i}); 
 speed_total_70 = (speed_total + speed_70{i});
 speed_80{i} = distance / max(t_80{i}); 
 speed_total_80 = (speed_total + speed_80{i});
 speed_90{i} = distance / max(t_90{i}); 
 speed_total_90 = (speed_total + speed_90{i});
 speed_100{i} = distance / max(t_100{i}); 
 speed_total_100 = (speed_total + speed_100{i});

end

motor_voltage_driving_average_50 = motor_voltage_driving_Sum_50 / i;
accelX_driving_average_50 =accelX_driving_Sum_50 / i;
accelY_driving_average_50 =accelY_driving_Sum_50 / i;
battery_voltage_driving_average_50 = battery_voltage_driving_Sum_50 /i;
t_average_50 = t_Sum_50 / i;
speed_avg_50 = speed_total_50 /i ;

motor_voltage_driving_average_70 = motor_voltage_driving_Sum_70 / i;
accelX_driving_average_70 = accelX_driving_Sum_70 / i;
accelY_driving_average_70 = accelY_driving_Sum_70 / i;
battery_voltage_driving_average_70 = battery_voltage_driving_Sum_70 / i;
t_average_70 = t_Sum_70 / i;
speed_avg_70 = speed_total_70 / i;

motor_voltage_driving_average_80 = motor_voltage_driving_Sum_80 / i;
accelX_driving_average_80 = accelX_driving_Sum_80 / i;
accelY_driving_average_80 = accelY_driving_Sum_80 / i;
battery_voltage_driving_average_80 = battery_voltage_driving_Sum_80 / i;
t_average_80 = t_Sum_80 / i;
speed_avg_80 = speed_total_80 / i;

motor_voltage_driving_average_90 = motor_voltage_driving_Sum_90 / i;
accelX_driving_average_90 = accelX_driving_Sum_90 / i;
accelY_driving_average_90 = accelY_driving_Sum_90 / i;
battery_voltage_driving_average_90 = battery_voltage_driving_Sum_90 / i;
t_average_90 = t_Sum_90 / i;
speed_avg_90 = speed_total_90 / i;

motor_voltage_driving_average_100 = motor_voltage_driving_Sum_100 / i;
accelX_driving_average_100 = accelX_driving_Sum_100 / i;
accelY_driving_average_100 = accelY_driving_Sum_100 / i;
battery_voltage_driving_average_100 = battery_voltage_driving_Sum_100 / i;
t_average_100 = t_Sum_100 / i;
speed_avg_100 = speed_total_100 / i;


figure(1);
subplot(2, 1, 1);hold off;
plot(t_average_50 , motor_voltage_driving_average_50,'b'); 
hold on;
plot(t_average_70, motor_voltage_driving_average_70,'g'); %hold on;
plot(t_average_80, motor_voltage_driving_average_80,'r'); %hold on;
plot(t_average_90, motor_voltage_driving_average_90,'c');% hold on;
plot(t_average_100, motor_voltage_driving_average_100,'m'); %hold on;

title('Avg Motor Voltage (.684 uF)', 'FontWeight', 'bold');
xlabel('Avg Time [s]')
ylabel('Avg Voltage [V]')
legend('50% PWM','70% PWM','80% PWM','90% PWM', '100% PWM')

subplot(2, 1, 2);hold off;
plot(t_average_50 ,accelX_driving_average_50, 'b'); %hold on
hold on;
plot(t_average_70, accelX_driving_average_70, 'g');%hold on;
plot(t_average_80, accelX_driving_average_80, 'r');%hold on;
plot(t_average_90, accelX_driving_average_90, 'c');%hold on;
plot(t_average_100, accelX_driving_average_100, 'm');%hold on;

title('Avg. Foward Car Acceleration with (.684 uF)', 'FontWeight', 'bold');
xlabel('Avg. Time [s]')
ylabel('Avg. Acceleration [m/s^2]')
legend('50% PWM','70% PWM','80% PWM','90% PWM', '100% PWM')


%% Formulate T(s) , Alpha/Tau(s) + 1 --> Alpha / (Ts + 1)

%Average Steady State Voltage
%Find Time constant Tau  -> Motor to reach 63% of its steady state value

%Take last 80% of motor voltage and find Avg steady State Value
start_index_50 = ceil(0.8 * motor_voltage_driving_maxRows_50);
last_80_percent_50 = motor_voltage_driving_average_50(start_index_50:end);
V_ss_50 = mean(last_80_percent_50);

start_index_70 = ceil(0.8 * motor_voltage_driving_maxRows_70);
last_80_percent_70 = motor_voltage_driving_average_70(start_index_70:end);
V_ss_70  = mean(last_80_percent_70);

start_index_80 = ceil(0.8 * motor_voltage_driving_maxRows_80);
last_80_percent_80 = motor_voltage_driving_average_80(start_index_80:end);
V_ss_80 = mean(last_80_percent_80);

start_index_90 = ceil(0.8 * motor_voltage_driving_maxRows_90);
last_80_percent_90 = motor_voltage_driving_average_90(start_index_90:end);
V_ss_90 = mean(last_80_percent_90);

start_index_100 = ceil(0.8 * motor_voltage_driving_maxRows_100);
last_80_percent_100 = motor_voltage_driving_average_100(start_index_100:end);
V_ss_100 = mean(last_80_percent_100);

%Voltage @ Tau and time at tau -- use either one
voltage_tau_50 = 0.632*V_ss_50;
tau_50 = interp1(motor_voltage_driving_average_50, t_average_50, voltage_tau_50,'linear'); %[s] * time at for which it tau is at 
voltage_tau_70 = 0.632 * V_ss_70;
tau_70 = interp1(motor_voltage_driving_average_70, t_average_70, voltage_tau_70, 'linear'); %[s]
voltage_tau_80 = 0.632 * V_ss_80;
tau_80 = interp1(motor_voltage_driving_average_80, t_average_80, voltage_tau_80, 'linear'); %[s]
voltage_tau_90 = 0.632 * V_ss_90;
tau_90 = interp1(motor_voltage_driving_average_90, t_average_90, voltage_tau_90, 'linear'); %[s]
voltage_tau_100 = 0.632 * V_ss_100;
tau_100 = interp1(motor_voltage_driving_average_100, t_average_100, voltage_tau_100, 'linear'); %[s]

tau = [ 0, voltage_tau_50 ,voltage_tau_70,voltage_tau_80,voltage_tau_90,voltage_tau_100];
pwm = [0, 50 , 70 , 80 , 90 , 100] ;

% Plot Tau & Alpha
% Alpha = Speed Steady State / V_ss by PWM
%%% Speed average is used in Alpha Calculations
%%% due to noise and drift in IMU, this is were we can imporove accuracy!!

figure(2);


plot(t_average_50, cumsum([diff(t_average_50) ; 0].* accelX_driving_average_50));hold on
alpha_50 = speed_avg_50 / V_ss_50 ; 
plot(t_average_70, cumsum([diff(t_average_70) ; 0].* accelX_driving_average_70));hold on
alpha_70 = speed_avg_70 / V_ss_70 ;
plot(t_average_80, cumsum([diff(t_average_80) ; 0].* accelX_driving_average_80));hold on
alpha_80 = speed_avg_80 / V_ss_80 ;
plot(t_average_90, cumsum([diff(t_average_90) ; 0].* accelX_driving_average_90));hold on
alpha_90 = speed_avg_90 / V_ss_90 ;
plot(t_average_100, cumsum([diff(t_average_100) ; 0].* accelX_driving_average_100));hold on
alpha_100 = speed_avg_100 / V_ss_100 ; hold off
title("Car Velocity - Integrated by AccelX_Data");
xlabel('Time [s]'); 
ylabel('Voltage [V]');
legend('Velocity at PWM 50', 'Velocity at PWM 70', 'Velocity at PWM 80', 'Velocity at PWM 90', 'Velocity at PWM 100')


figure(3); 
alpha = [0, alpha_50, alpha_70, alpha_80, alpha_90, alpha_100] ;
mean_alpha = mean(alpha);
mean_tau =mean(tau);

subplot(2,1,1); %Plot alphas and Alpha Mean 
plot(pwm, alpha,'x'); hold on
y_limits = ylim; 
plot(xlim, [mean_alpha, mean_alpha], '--g', 'LineWidth', 2); hold off% Plot the mean line
ylim(y_limits); % Restore Ylim
title('Alpha');
xlabel('PWM [%]')
ylabel('Alpha - [ m/s*v ]')
legend('Alpha',"Alpha Mean") %%% Outlier in PWM 50 alpha check Data Aquistion

subplot(2,1,2); %%Plot Tau and Tau Mean
plot(pwm, tau,'o');hold on
y_limits = ylim; 
plot(xlim, [mean_tau, mean_tau], '--g', 'LineWidth', 2); hold off% Plot the mean line
ylim(y_limits);
title('tau');
ylabel('tau [.632*V_ss');
xlabel('PWM [%]');
legend('Tau',"Tau Mean")



%% State Space Matricies
figure(4);
A = - 1/ mean_tau ;
B = mean_alpha / mean_tau;
C = A;
D = B;
plant = ss(A,B,C,D);

% Design observer gain
observer_poles = [-20]; % Desired observer poles
L = place(A', C', observer_poles)'; % Observer gain matrix
% Define observer dynamics
observer_sys = ss(A - L*C, B, eye(1), zeros(1,1));

% Simulate system and observer
t = 0:0.01:5;   % Time vector
u = ones(size(t)); % Input signal (e.g., step input)
[y, t_sim, x] = lsim(plant, u, t); % Simulate system
[y_est, t_sim_est, x_est] = lsim(observer_sys, u, t); % Simulate observer

% Plot results
figure;
subplot(2,1,1);
plot(t_sim, y, 'b', t_sim_est, y_est, 'r--');
xlabel('Time');
ylabel('Output');
legend('True Output', 'Estimated Output');
title('System Output and Estimated Output');




% %%
% M=[B];     % controllability matrix
% if rank(M) ==1
%     mu=[-2];
%     K=acker(A,B,mu);
% %     Acl=A-B*K;
% %     sys_cl=ss(Acl,B,C,D);
% end
% 
% O=[C];   % observability matrix
% if rank(O)==1
%     muo=[-20];
%     KeT=acker(A',C',muo); 
%     Ke=KeT'; %Observer Poles
% %     Aobs=A-Ke*C;
% end
% Aobc=A-B*K-Ke*C+Ke*D*K;
% Bobc=Ke;
% Cobc=-K;
% Dobc=0;
% sys_obc=ss(Aobc,Bobc,Cobc,Dobc);
% % Gobc=ss2tf(Aobc,Bobc,Cobc,Dobc);
% sys_fwd=series(-sys_obc,plant);
% sys_cl=feedback(sys_fwd,1);
% % sys_cl=sys_cl/dcgain(sys_cl);
% 
% figure(5)
% subplot(2,2,1)
% pzmap(plant);
% grid on
% grid minor
% subplot(2,2,2)
% pzmap(sys_obc)
% grid on
% subplot(2,2,3)
% pzmap(sys_cl)
% grid on
% grid minor
% subplot(2,2,4)
% step(plant,'b',sys_cl,'r')
% grid on
% grid minor
% grid minor


%%
v = [0 , V_ss_50, V_ss_70, V_ss_80 ,V_ss_90,V_ss_100];
%v = [ 0 , .2375, .3317 , .3775 , .4262, .4709] ; %Graphical Estimate
pwm = [0, 50 , 70 , 80 , 90 , 100] ;
figure(6);
plot(pwm,v,'o')

























